# Copyright (c) Ultraviolet
# SPDX-License-Identifier: Apache-2.0

volumes:
  opensearch-data:

services:
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    networks:
      - cube-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  opensearch-init:
    image: curlimages/curl:latest
    container_name: opensearch-init
    depends_on:
      opensearch:
        condition: service_healthy
    networks:
      - cube-network
    volumes:
      - ./opensearch-index-template.json:/tmp/index-template.json:ro
    command: >
      sh -c '
        echo "Creating index template for audit logs...";
        curl -X PUT "http://opensearch:9200/_index_template/cube-audit-template" -H "Content-Type: application/json" -d @/tmp/index-template.json;
        
        echo "";
        echo "OpenSearch setup complete!";
        curl -s "http://opensearch:9200/_cat/indices?v";
      '
    restart: "no"

  fluent-bit:
    image: fluent/fluent-bit:2.2
    container_name: fluent-bit
    volumes:
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./parsers.conf:/fluent-bit/etc/parsers.conf:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      opensearch:
        condition: service_healthy
      opensearch-init:
        condition: service_completed_successfully
    networks:
      - cube-network
    restart: unless-stopped

  cube-agent:
    container_name: cube-agent
    image: ghcr.io/ultravioletrs/cube/agent:latest
    restart: on-failure
    networks:
      - cube-network
    environment:
      UV_CUBE_AGENT_LOG_LEVEL: ${UV_CUBE_AGENT_LOG_LEVEL}
      UV_CUBE_AGENT_HOST: ${UV_CUBE_AGENT_HOST}
      UV_CUBE_AGENT_PORT: ${UV_CUBE_AGENT_PORT}
      UV_CUBE_AGENT_SERVER_CERT: ${UV_CUBE_AGENT_SERVER_CERT}
      UV_CUBE_AGENT_SERVER_KEY: ${UV_CUBE_AGENT_SERVER_KEY}
      UV_CUBE_AGENT_INSTANCE_ID: ${UV_CUBE_AGENT_INSTANCE_ID}
      UV_CUBE_AGENT_TARGET_URL: ${UV_CUBE_AGENT_TARGET_URL}
      SMQ_SEND_TELEMETRY: ${SMQ_SEND_TELEMETRY}
      SMQ_JAEGER_URL: ${SMQ_JAEGER_URL}
      SMQ_JAEGER_TRACE_RATIO: ${SMQ_JAEGER_TRACE_RATIO}
      SMQ_AUTH_GRPC_URL: ${SMQ_AUTH_GRPC_URL}
      SMQ_AUTH_GRPC_TIMEOUT: ${SMQ_AUTH_GRPC_TIMEOUT}
      SMQ_AUTH_GRPC_CLIENT_CERT: ${SMQ_AUTH_GRPC_CLIENT_CERT:+/auth-grpc-client.crt}
      SMQ_AUTH_GRPC_CLIENT_KEY: ${SMQ_AUTH_GRPC_CLIENT_KEY:+/auth-grpc-client.key}
      SMQ_AUTH_GRPC_SERVER_CA_CERTS: ${SMQ_AUTH_GRPC_SERVER_CA_CERTS:+/auth-grpc-server-ca.crt}
    volumes:
      # Auth gRPC client certificates
      - type: bind
        source: ${SMQ_AUTH_GRPC_CLIENT_CERT:-ssl/certs/dummy/client_cert}
        target: /auth-grpc-client${SMQ_AUTH_GRPC_CLIENT_CERT:+.crt}
        bind:
          create_host_path: true
      - type: bind
        source: ${SMQ_AUTH_GRPC_CLIENT_KEY:-ssl/certs/dummy/client_key}
        target: /auth-grpc-client${SMQ_AUTH_GRPC_CLIENT_KEY:+.key}
        bind:
          create_host_path: true
      - type: bind
        source: ${SMQ_AUTH_GRPC_SERVER_CA_CERTS:-ssl/certs/dummy/server_ca}
        target: /auth-grpc-server-ca${SMQ_AUTH_GRPC_SERVER_CA_CERTS:+.crt}
        bind:
          create_host_path: true
    labels:
      # Labels for log parsing
      logging: "cube-agent"
      service: "agent"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging,service"
        tag: "cube-agent|{{.Name}}"
    depends_on:
      - fluent-bit
      - auth

  cube-proxy:
    container_name: cube-proxy
    image: ghcr.io/ultravioletrs/cube/proxy:latest
    restart: on-failure
    networks:
      - cube-network
    depends_on:
      - cube-agent
    environment:
      UV_CUBE_PROXY_LOG_LEVEL: ${UV_CUBE_PROXY_LOG_LEVEL}
      UV_CUBE_AGENT_URL: ${UV_CUBE_AGENT_URL}
      UV_CUBE_PROXY_HOST: ${UV_CUBE_PROXY_HOST}
      UV_CUBE_PROXY_PORT: ${UV_CUBE_PROXY_PORT}
      UV_CUBE_PROXY_SERVER_CERT: ${UV_CUBE_PROXY_SERVER_CERT}
      UV_CUBE_PROXY_SERVER_KEY: ${UV_CUBE_PROXY_SERVER_KEY}  
      SMQ_SEND_TELEMETRY: ${SMQ_SEND_TELEMETRY}
      UV_CUBE_PROXY_INSTANCE_ID: ${UV_CUBE_PROXY_INSTANCE_ID}
      SMQ_JAEGER_URL: ${SMQ_JAEGER_URL}
      SMQ_JAEGER_TRACE_RATIO: ${SMQ_JAEGER_TRACE_RATIO}
    ports:
      - ${UV_CUBE_PROXY_PORT}:${UV_CUBE_PROXY_PORT}
