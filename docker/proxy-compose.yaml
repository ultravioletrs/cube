# Copyright (c) Ultraviolet
# SPDX-License-Identifier: Apache-2.0

services:
  cube-proxy:
    container_name: cube-proxy
    image: ghcr.io/ultravioletrs/cube/proxy:latest
    restart: on-failure
    networks:
      - cube-network
    depends_on:
      - auth
    environment:
      UV_CUBE_PROXY_LOG_LEVEL: ${UV_CUBE_PROXY_LOG_LEVEL}
      UV_CUBE_PROXY_TARGET_URL: ${UV_CUBE_PROXY_TARGET_URL}
      UV_CUBE_PROXY_HOST: ${UV_CUBE_PROXY_HOST}
      UV_CUBE_PROXY_PORT: ${UV_CUBE_PROXY_PORT}
      UV_CUBE_PROXY_SERVER_CERT: ${UV_CUBE_PROXY_SERVER_CERT}
      UV_CUBE_PROXY_SERVER_KEY: ${UV_CUBE_PROXY_SERVER_KEY}  
      SMQ_SEND_TELEMETRY: ${SMQ_SEND_TELEMETRY}
      UV_CUBE_PROXY_INSTANCE_ID: ${UV_CUBE_PROXY_INSTANCE_ID}
      SMQ_JAEGER_URL: ${SMQ_JAEGER_URL}
      SMQ_JAEGER_TRACE_RATIO: ${SMQ_JAEGER_TRACE_RATIO}
      # Guardrails configuration
      UV_CUBE_GUARDRAILS_ENABLED: ${UV_CUBE_GUARDRAILS_ENABLED}
      UV_CUBE_GUARDRAILS_URL: ${UV_CUBE_GUARDRAILS_URL}
      UV_CUBE_PROXY_TIMEOUT: ${UV_CUBE_PROXY_TIMEOUT}
    ports:
      - ${UV_CUBE_PROXY_PORT}:${UV_CUBE_PROXY_PORT}
  
  cube-agent:
    container_name: cube-agent
    image: ghcr.io/ultravioletrs/cube/agent:latest
    restart: on-failure
    networks:
      - cube-network
    depends_on:
      - ollama
    environment:
      UV_CUBE_AGENT_LOG_LEVEL: ${UV_CUBE_AGENT_LOG_LEVEL}
      UV_CUBE_AGENT_HOST: ${UV_CUBE_AGENT_HOST}
      UV_CUBE_AGENT_PORT: ${UV_CUBE_AGENT_PORT}
      UV_CUBE_AGENT_SERVER_CERT: ${UV_CUBE_AGENT_SERVER_CERT}
      UV_CUBE_AGENT_SERVER_KEY: ${UV_CUBE_AGENT_SERVER_KEY}
      UV_CUBE_AGENT_INSTANCE_ID: ${UV_CUBE_AGENT_INSTANCE_ID}
      UV_CUBE_AGENT_TARGET_URL: ${UV_CUBE_AGENT_TARGET_URL}
      SMQ_SEND_TELEMETRY: ${SMQ_SEND_TELEMETRY}
      SMQ_JAEGER_URL: ${SMQ_JAEGER_URL}
      SMQ_JAEGER_TRACE_RATIO: ${SMQ_JAEGER_TRACE_RATIO}
      SMQ_AUTH_GRPC_URL: ${SMQ_AUTH_GRPC_URL}
      SMQ_AUTH_GRPC_TIMEOUT: ${SMQ_AUTH_GRPC_TIMEOUT}
      SMQ_AUTH_GRPC_CLIENT_CERT: ${SMQ_AUTH_GRPC_CLIENT_CERT:+/auth-grpc-client.crt}
      SMQ_AUTH_GRPC_CLIENT_KEY: ${SMQ_AUTH_GRPC_CLIENT_KEY:+/auth-grpc-client.key}
      SMQ_AUTH_GRPC_SERVER_CA_CERTS: ${SMQ_AUTH_GRPC_SERVER_CA_CERTS:+/auth-grpc-server-ca.crt}
    volumes:
      # Auth gRPC client certificates
      - type: bind
        source: ${SMQ_AUTH_GRPC_CLIENT_CERT:-ssl/certs/dummy/client_cert}
        target: /auth-grpc-client${SMQ_AUTH_GRPC_CLIENT_CERT:+.crt}
        bind:
          create_host_path: true
      - type: bind
        source: ${SMQ_AUTH_GRPC_CLIENT_KEY:-ssl/certs/dummy/client_key}
        target: /auth-grpc-client${SMQ_AUTH_GRPC_CLIENT_KEY:+.key}
        bind:
          create_host_path: true
      - type: bind
        source: ${SMQ_AUTH_GRPC_SERVER_CA_CERTS:-ssl/certs/dummy/server_ca}
        target: /auth-grpc-server-ca${SMQ_AUTH_GRPC_SERVER_CA_CERTS:+.crt}
        bind:
          create_host_path: true
